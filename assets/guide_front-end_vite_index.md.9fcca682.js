import{o as n,c as s,a,b as e,t,d as o}from"./app.03c36faf.js";const p='{"title":"Vite Configuration","description":"","frontmatter":{"title":"Vite Configuration"},"headers":[{"level":2,"title":"Example Config","slug":"example-config"},{"level":3,"title":"Specific build modes","slug":"specific-build-modes"}],"relativePath":"guide/front-end/vite/index.md","lastUpdated":1620108049253}',i={},c={id:"frontmatter-title"},l=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),r=o('<p>Each and every project will be unique regarding structure, expected outputs and general development needs. The following is intended to provide coverage for general expectations using Adobe&#39;s AEM Archetype as a reference.</p><h2 id="example-config"><a class="header-anchor" href="#example-config" aria-hidden="true">#</a> Example Config</h2><p>Below is an example <code>vite.config.js</code> which intentionally uses the <code>vite-tsconfig-paths</code> as Adobe have adopted TypeScript in their archetype.</p><p>What you can see is the same output structures being used align to the <a href="/guide/front-end/structure/">structure</a> described previously. Some other things that are also going on:</p><ul><li>Disables brotli compression calculations (saves 2-5 seconds per prod build)</li><li>Disables the <code>manifest.json</code> file</li><li>Disables minification when running in <strong>development</strong> mode</li><li>Disables sourcemaps when not using the Vite DevServer</li></ul><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> tsconfigPaths <span class="token keyword">from</span> <span class="token string">&#39;vite-tsconfig-paths&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    brotliSize<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    manifest<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    minify<span class="token operator">:</span> mode <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token string">&#39;terser&#39;</span><span class="token punctuation">,</span>\n    outDir<span class="token operator">:</span> <span class="token string">&#39;path/to/output/dir&#39;</span><span class="token punctuation">,</span>\n    sourcemap<span class="token operator">:</span> command <span class="token operator">===</span> <span class="token string">&#39;serve&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;inline&#39;</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      output<span class="token operator">:</span> <span class="token punctuation">{</span>\n        assetFileNames<span class="token operator">:</span> <span class="token string">&#39;&lt;project&gt;.header/resources/[ext]/[name][extname]&#39;</span><span class="token punctuation">,</span>\n        chunkFileNames<span class="token operator">:</span> <span class="token string">&#39;&lt;project&gt;.footer/resources/chunks/[name].[hash].js&#39;</span><span class="token punctuation">,</span>\n        entryFileNames<span class="token operator">:</span> <span class="token string">&#39;&lt;project&gt;.footer/resources/js/[name].js&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">tsconfigPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="specific-build-modes"><a class="header-anchor" href="#specific-build-modes" aria-hidden="true">#</a> Specific build modes</h3><p>By default Vite runs its DevServer in <strong>development</strong> mode but builds always run in <strong>production</strong> which is fine for non-AEM projects but AEM needs more control. The above configuration enables us to do things like the below.</p><div class="language-shell"><pre><code>vite build --mode development\n<span class="token comment"># or</span>\nvite build --mode production\n</code></pre></div>',9);i.render=function(o,p,i,u,d,k){return n(),s("div",null,[a("h1",c,[l,e(" "+t(o.$frontmatter.title),1)]),r])};export default i;export{p as __pageData};
