import{_ as s,c as t,a as n,b as p,t as e,d as o,o as c}from"./app.4e698dd0.js";const v='{"title":"Dynamic Imports","description":"","frontmatter":{"title":"Dynamic Imports"},"headers":[{"level":2,"title":"Rollup plugin","slug":"rollup-plugin"},{"level":2,"title":"Configuration","slug":"configuration"},{"level":3,"title":"Properties","slug":"properties"},{"level":2,"title":"How this works","slug":"how-this-works"},{"level":3,"title":"Circular imports","slug":"circular-imports"},{"level":2,"title":"Caching and minification","slug":"caching-and-minification"},{"level":3,"title":"Setting the Vite configuration","slug":"setting-the-vite-configuration"}],"relativePath":"guide/front-end/dynamic-imports/index.md","lastUpdated":1636353606456}',i={},l={id:"frontmatter-title",tabindex:"-1"},u=n("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),r=o(`<p>Vite uses rollup under the hood which supports dynamic imports just like webpack and other bundlers but it has a small <em>flaw</em>. Well, not so much a flaw but rather a consideration that was never put to thought simply because of how AEM ClientLibs work.</p><p>The import rewriter takes the ES module import paths and converts them into AEM friendly paths automatically.</p><h2 id="rollup-plugin" tabindex="-1">Rollup plugin <a class="header-anchor" href="#rollup-plugin" aria-hidden="true">#</a></h2><p>AEM Vite provides a rollup plugin that will rewrite dynamic import paths to your <code>/etc.clientlibs</code> proxy path.</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @aem-vite/import-rewriter
<span class="token comment"># or; yarn</span>
<span class="token function">yarn</span> <span class="token function">add</span> -D @aem-vite/import-rewriter
</code></pre></div><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-hidden="true">#</a></h2><p>Getting this plugin configured is really simple, all it requires is your ClientLib public path.</p><div class="warning custom-block"><p class="custom-block-title">&#39;command&#39; no longer exists</p><p>As of v3.0.0, the <code>command</code> option no longer exists in favour of using Vite&#39;s <code>apply</code> property which brings a slight performance gain with it.</p></div><div class="language-js"><div class="highlight-lines"><div class="highlighted">\xA0</div><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br></div><pre><code><span class="token keyword">import</span> aemViteImportRewriter <span class="token keyword">from</span> <span class="token string">&#39;@aem-vite/import-rewriter&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... all other plugins before, &#39;aemViteImportRewriter&#39; must be last</span>
    <span class="token punctuation">{</span>
      <span class="token operator">...</span><span class="token function">aemViteImportRewriter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        publicPath<span class="token operator">:</span> <span class="token string">&#39;/etc.clientlibs/&lt;project&gt;/clientlibs/&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

      apply<span class="token operator">:</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span>
      enforce<span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:left;">Property Name</th><th>Type</th><th>Required</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>caching</strong><br><small>Instruct import rewriter how to handle AEM caching.</small></td><td><code>object</code></td><td>No</td></tr><tr><td style="text-align:left;"><strong>mainEntryPath</strong><br><small>Custom entry path for your Vite configuration. This is automatically identified in most cases.</small></td><td><code>string</code></td><td>No</td></tr><tr><td style="text-align:left;"><strong>publicPath</strong><br><small>The AEM proxy path to your ClientLibs directory.</small></td><td><code>string</code></td><td>Yes</td></tr></tbody></table><h4 id="caching" tabindex="-1">Caching <a class="header-anchor" href="#caching" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Property Name</th><th>Type</th><th>Required</th><th>Default</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>enabled</strong><br><small>Should caching support be utilised during builds?</small></td><td><code>boolean</code></td><td>Yes</td><td>-</td></tr><tr><td style="text-align:left;"><strong>keyFormat</strong><br><small>Long term cache key format.</small></td><td><code>string</code></td><td>No</td><td><code>lc-%s-lc</code></td></tr><tr><td style="text-align:left;"><strong>minification</strong><br><small>Should <code>.min</code> be added to the import path?</small></td><td><code>boolean</code></td><td>No</td><td><code>false</code></td></tr></tbody></table><h2 id="how-this-works" tabindex="-1">How this works <a class="header-anchor" href="#how-this-works" aria-hidden="true">#</a></h2><p>Under the hood <code>es-module-lexer</code> is used to parse the rollup chunk source and identifies all of the <code>import</code> statements. Once identified, they are parsed and all instances that use path patterns such as <code>./</code> or <code>../</code> will get replaced with <code>publicPath</code> configured in your plugin configuration.</p><p>By rewriting the imports we solve another issue and that is we prevent Vite adding duplicate imports via its dynamic import polyfill transformer.</p><h3 id="circular-imports" tabindex="-1">Circular imports <a class="header-anchor" href="#circular-imports" aria-hidden="true">#</a></h3><p>In addition to handling import paths, the main entry path is also rewritten to the correct AEM ClientLib path to ensure ES module imports behave correctly in AEM.</p><h2 id="caching-and-minification" tabindex="-1">Caching and minification <a class="header-anchor" href="#caching-and-minification" aria-hidden="true">#</a></h2><p>So your code doesn&#39;t use the wrong path when in a testing, staging or production environment, it is good practice to dynamically switch on minification for AEM Vite using an environment variable via your Maven <code>pom.xml</code> file.</p><p>The below showcases this using Adobe Cloud Manager as an example by looking for a <code>CM_BUILD</code> environment variable and setting a Maven property called <code>aem.caching</code>. This Maven property can then be passed onto <code>frontend-maven-plugin</code> which can subsequently be passed onto your Vite configuration.</p><div class="info custom-block"><p class="custom-block-title">A note about the &lt;arguments&gt; property</p><p>This property assumes you already have an npm script called <code>build</code> in your <code>package.json</code> file.</p></div><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aem.caching</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aem.caching</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.eirslett<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>frontend-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>

      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>build-fed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>initialize<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arguments</span><span class="token punctuation">&gt;</span></span>build --config ./path/to/vite.config.js<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arguments</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environmentVariables</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AEM_CACHING</span><span class="token punctuation">&gt;</span></span>\${aem.caching}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AEM_CACHING</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environmentVariables</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>cmBuild<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>env.CM_BUILD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aem.caching</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aem.caching</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="setting-the-vite-configuration" tabindex="-1">Setting the Vite configuration <a class="header-anchor" href="#setting-the-vite-configuration" aria-hidden="true">#</a></h3><p>From there, you can update your Vite configuration to look for <code>AEM_CACHING</code> and then enable caching and minification. An assumption is made that caching and minification are both enabled, if you need separation, add another Maven profile to set another property/environment variable.</p><div class="language-js"><div class="highlight-lines"><br><br><div class="highlighted">\xA0</div><br><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">import</span> aemViteImportRewriter <span class="token keyword">from</span> <span class="token string">&#39;@aem-vite/import-rewriter&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> needsCaching <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">AEM_CACHING</span> <span class="token operator">===</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// ... all other plugins before, &#39;aemViteImportRewriter&#39; must be last</span>
    <span class="token punctuation">{</span>
      <span class="token operator">...</span><span class="token function">aemViteImportRewriter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        publicPath<span class="token operator">:</span> <span class="token string">&#39;/etc.clientlibs/&lt;project&gt;/clientlibs/&#39;</span><span class="token punctuation">,</span>

        caching<span class="token operator">:</span> <span class="token punctuation">{</span>
          enabled<span class="token operator">:</span> command <span class="token operator">===</span> <span class="token string">&#39;build&#39;</span> <span class="token operator">&amp;&amp;</span> mode <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span> needsCaching<span class="token punctuation">,</span>
          minification<span class="token operator">:</span> needsCaching<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

      apply<span class="token operator">:</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span>
      enforce<span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,26);function d(a,k,g,h,m,f){return c(),t("div",null,[n("h1",l,[p(e(a.$frontmatter.title)+" ",1),u]),r])}var y=s(i,[["render",d]]);export{v as __pageData,y as default};
