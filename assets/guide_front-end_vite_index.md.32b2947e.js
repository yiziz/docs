import{o as n,c as s,a,b as e,t,d as o}from"./app.e4f3aef9.js";const p='{"title":"Vite Configuration","description":"","frontmatter":{"title":"Vite Configuration"},"headers":[{"level":2,"title":"Recommended configuration","slug":"recommended-configuration"},{"level":3,"title":"Specific build modes","slug":"specific-build-modes"},{"level":2,"title":"Source structure","slug":"source-structure"},{"level":2,"title":"Plugins","slug":"plugins"},{"level":2,"title":"Code output","slug":"code-output"},{"level":2,"title":"DevServer","slug":"devserver"}],"relativePath":"guide/front-end/vite/index.md","lastUpdated":1621350556489}',i={},c={id:"frontmatter-title"},r=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),u=o('<p>Each and every project will be unique regarding structure, expected outputs and general development needs. The following is intended to provide coverage for general expectations using Adobe&#39;s AEM Archetype as a reference.</p><h2 id="recommended-configuration"><a class="header-anchor" href="#recommended-configuration" aria-hidden="true">#</a> Recommended configuration</h2><p>Below is an example <code>vite.config.js</code> which intentionally uses the <code>vite-tsconfig-paths</code> as Adobe have adopted TypeScript in their archetype.</p><p>What you can see is the same output structures being used align to the <a href="/guide/front-end/structure/">structure</a> described previously. Some other things that are also going on:</p><ul><li>Disables brotli compression calculations (saves 2-5 seconds per prod build)</li><li>Disables the <code>manifest.json</code> file</li><li>Disables minification when running in <strong>development</strong> mode</li><li>Disables sourcemaps when not using the Vite DevServer</li></ul><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> tsconfigPaths <span class="token keyword">from</span> <span class="token string">&#39;vite-tsconfig-paths&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    brotliSize<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    manifest<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    minify<span class="token operator">:</span> mode <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token string">&#39;terser&#39;</span><span class="token punctuation">,</span>\n    outDir<span class="token operator">:</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">,</span>\n    sourcemap<span class="token operator">:</span> command <span class="token operator">===</span> <span class="token string">&#39;serve&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;inline&#39;</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      output<span class="token operator">:</span> <span class="token punctuation">{</span>\n        assetFileNames<span class="token operator">:</span> <span class="token string">&#39;&lt;project&gt;.header/resources/[ext]/[name][extname]&#39;</span><span class="token punctuation">,</span>\n        chunkFileNames<span class="token operator">:</span> <span class="token string">&#39;&lt;project&gt;.footer/resources/chunks/[name].[hash].js&#39;</span><span class="token punctuation">,</span>\n        entryFileNames<span class="token operator">:</span> <span class="token string">&#39;&lt;project&gt;.footer/resources/js/[name].js&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">tsconfigPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>See <a href="./../module-imports/">module imports</a> which explains the reasoning behind the rollup <code>output</code> structure.</p><h3 id="specific-build-modes"><a class="header-anchor" href="#specific-build-modes" aria-hidden="true">#</a> Specific build modes</h3><p>By default Vite runs its DevServer in <strong>development</strong> mode, but standard builds always run in <strong>production</strong> which is fine for non-AEM projects whereas AEM needs more control. The above configuration enables us to do things like the below.</p><div class="language-shell"><pre><code>vite build --mode development\n<span class="token comment"># or</span>\nvite build --mode production\n</code></pre></div><p>Now that you can build both development and production bundles, you can toggle between having features such as sourcemaps and console logging if you wish to test code outside of Vite&#39;s DevServer.</p><h2 id="source-structure"><a class="header-anchor" href="#source-structure" aria-hidden="true">#</a> Source structure</h2><p>Where your inputs come from isn&#39;t important as Vite simply consumes anything you provide to it. It is, however, recommended that you consider your main website CSS and JavaScript separate entries.</p><p>The below example demonsrates this but you will need to keep in mind that the <code>input</code> keys should be unqiue otherwise rollup will automatically append an number to the end of the filename. See rollup&#39;s <a href="https://rollupjs.org/guide/en/#input" target="_blank" rel="noopener noreferrer">input documentation</a> for more information.</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      input<span class="token operator">:</span> <span class="token punctuation">{</span>\n        app<span class="token operator">:</span> <span class="token string">&#39;src/main/webpack/css/app.scss&#39;</span><span class="token punctuation">,</span>\n        bundle<span class="token operator">:</span> <span class="token string">&#39;src/main/webpack/js/app.ts&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="plugins"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> Plugins</h2><p>Please refer to Vite&#39;s <a href="https://vitejs.dev/guide/using-plugins.html" target="_blank" rel="noopener noreferrer">plugin documentation</a> for instructions on using plugins in Vite.</p><h2 id="code-output"><a class="header-anchor" href="#code-output" aria-hidden="true">#</a> Code output</h2><p>The process of how your bundled code gets handled shouldn&#39;t change if you won&#39;t need it to. The design of AEM Vite enables you to use any structure you wish but recommends ours for the best compatibility. Tools such as Adobe&#39;s <code>aem-clientlib-generator</code> will work perfectly fine with AEM Vite as it is executed after a build.</p><h2 id="devserver"><a class="header-anchor" href="#devserver" aria-hidden="true">#</a> DevServer</h2><p>If you want to customise how the Vite DevServer behaves you can do so via Vite&#39;s <code>server</code> configuration. By default Vite will attempt to start the server on port <code>3000</code> but will automatically increment to the next available port if <code>3000</code> is already in use. To ensure this doesn&#39;t happen, it is recommended to set a more specific port that you don&#39;t expect to change.</p><p>Please refer to Vite&#39;s <a href="https://vitejs.dev/config/#server-options" target="_blank" rel="noopener noreferrer">server api documention</a> for more information.</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  server<span class="token operator">:</span> <span class="token punctuation">{</span>\n    port<span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',23);i.render=function(o,p,i,l,d,k){return n(),s("div",null,[a("h1",c,[r,e(" "+t(o.$frontmatter.title),1)]),u])};export default i;export{p as __pageData};
