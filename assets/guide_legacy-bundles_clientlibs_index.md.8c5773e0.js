import{_ as a,c as s,a as t,b as n,t as o,d as i,o as l}from"./app.7364d4aa.js";const w=`{"title":"ClientLibs Support","description":"","frontmatter":{"title":"ClientLibs Support"},"headers":[{"level":2,"title":"Update your template policy","slug":"update-your-template-policy"},{"level":2,"title":"How to test that things work?","slug":"how-to-test-that-things-work"},{"level":2,"title":"What if I don't want ES modules?","slug":"what-if-i-don-t-want-es-modules"}],"relativePath":"guide/legacy-bundles/clientlibs/index.md"}`,c={},p={id:"frontmatter-title",tabindex:"-1"},r=t("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),d=i(`<p>A simple solution to this problem would be to have another separate ClientLib structure containing only <code>js.txt</code>. Each ClientLib directory would have a unique name as outlined below.</p><table><thead><tr><th>ClientLib Category</th><th><code>esModule</code></th><th><code>noModule</code></th><th><code>css.txt</code></th><th><code>js.txt</code></th></tr></thead><tbody><tr><td><code>clientlib-site.es</code></td><td><code>true</code></td><td><code>false</code></td><td>Yes</td><td>Yes</td></tr><tr><td><code>clientlib-site.legacy</code></td><td><code>false</code></td><td><code>true</code></td><td>No</td><td>Yes</td></tr></tbody></table><p>There is no real importance to how you name your ClientLibs as the order of how they get output is determined by your template policy.</p><h2 id="update-your-template-policy" tabindex="-1">Update your template policy <a class="header-anchor" href="#update-your-template-policy" aria-hidden="true">#</a></h2><p>It is important that in the above example that <code>clientlib-site.es</code> is generated first in the page source. To ensure this is the case, make sure your template policy is similar to the below.</p><div class="language-xml"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>page</span> <span class="token attr-name"><span class="token namespace">jcr:</span>primaryType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nt:unstructured<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policy</span>
    <span class="token attr-name"><span class="token namespace">jcr:</span>primaryType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nt:unstructured<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">sling:</span>resourceType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wcm/core/components/policy/policy<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">clientlibs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[clientlib-site.es,clientlib-site.legacy]<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">clientlibsJsHead</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[clientlib-site.es,clientlib-site.legacy]<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>page</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>This will vary from project-to-project, use the above as a guide only.</p><h2 id="how-to-test-that-things-work" tabindex="-1">How to test that things work? <a class="header-anchor" href="#how-to-test-that-things-work" aria-hidden="true">#</a></h2><p>Open DevTools in your browser and navigate to the Network tab (or equivalent). Refresh the page and filter by JS files. You should observe ClientLibs loading from <code>clientlib-site.es</code> when using a modern browser otherwise <code>clientlib-site.legacy</code>.</p><h2 id="what-if-i-don-t-want-es-modules" tabindex="-1">What if I don&#39;t want ES modules? <a class="header-anchor" href="#what-if-i-don-t-want-es-modules" aria-hidden="true">#</a></h2><p>Easy!</p><p>Simply have Vite build only legacy bundles by using the <a href="https://vitejs.dev/config/#build-target" target="_blank" rel="noopener noreferrer"><code>build.target</code></a> config option. From the above, simply omit <code>clientlib-site.es</code> and ensure your <code>clientlib-site.legacy</code> ClientLib contains both a <code>css.txt</code> and <code>js.txt</code> file.</p><p>Both the <code>esModule</code> and <code>noModule</code> properties won&#39;t be required in this case since we are no longer working with an ES module.</p>`,13);function u(e,h,b,m,k,g){return l(),s("div",null,[t("h1",p,[n(o(e.$frontmatter.title)+" ",1),r]),d])}var f=a(c,[["render",u]]);export{w as __pageData,f as default};
