import{_ as s,c as o,a as e,b as a,t as n,d as l,o as p}from"./app.e3d84d55.js";const m=JSON.parse(`{"title":"ClientLibs Support","description":"","frontmatter":{"title":"ClientLibs Support"},"headers":[{"level":2,"title":"Update your template policy","slug":"update-your-template-policy"},{"level":2,"title":"How to test that things work?","slug":"how-to-test-that-things-work"},{"level":2,"title":"What if I don't want ES modules?","slug":"what-if-i-don-t-want-es-modules"}],"relativePath":"guide/legacy-bundles/clientlibs/index.md","lastUpdated":1656664739000}`),i={name:"guide/legacy-bundles/clientlibs/index.md"},r={id:"frontmatter-title",tabindex:"-1"},c=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),d=l(`<p>A simple solution to this problem would be to have another separate ClientLib structure containing only <code>js.txt</code>. Each ClientLib directory would have a unique name as outlined below.</p><table><thead><tr><th>ClientLib Category</th><th><code>esModule</code></th><th><code>noModule</code></th><th><code>css.txt</code></th><th><code>js.txt</code></th></tr></thead><tbody><tr><td><code>clientlib-site.es</code></td><td><code>true</code></td><td><code>false</code></td><td>Yes</td><td>Yes</td></tr><tr><td><code>clientlib-site.legacy</code></td><td><code>false</code></td><td><code>true</code></td><td>No</td><td>Yes</td></tr></tbody></table><p>There is no real importance to how you name your ClientLibs as the order of how they get output is determined by your template policy.</p><h2 id="update-your-template-policy" tabindex="-1">Update your template policy <a class="header-anchor" href="#update-your-template-policy" aria-hidden="true">#</a></h2><p>It is important that in the above example that <code>clientlib-site.es</code> is generated first in the page source. To ensure this is the case, make sure your template policy is similar to the below.</p><div class="language-xml"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">page</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">jcr</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">primaryType</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nt:unstructured</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">policy</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">jcr</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">primaryType</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nt:unstructured</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">sling</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">resourceType</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wcm/core/components/policy/policy</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">clientlibs</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[clientlib-site.es,clientlib-site.legacy]</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">clientlibsJsHead</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[clientlib-site.es,clientlib-site.legacy]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">page</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>This will vary from project-to-project, use the above as a guide only.</p><h2 id="how-to-test-that-things-work" tabindex="-1">How to test that things work? <a class="header-anchor" href="#how-to-test-that-things-work" aria-hidden="true">#</a></h2><p>Open DevTools in your browser and navigate to the Network tab (or equivalent). Refresh the page and filter by JS files. You should observe ClientLibs loading from <code>clientlib-site.es</code> when using a modern browser otherwise <code>clientlib-site.legacy</code>.</p><h2 id="what-if-i-don-t-want-es-modules" tabindex="-1">What if I don&#39;t want ES modules? <a class="header-anchor" href="#what-if-i-don-t-want-es-modules" aria-hidden="true">#</a></h2><p>Easy!</p><p>Simply have Vite build only legacy bundles by using the <a href="https://vitejs.dev/config/#build-target" target="_blank" rel="noopener noreferrer"><code>build.target</code></a> config option. From the above, simply omit <code>clientlib-site.es</code> and ensure your <code>clientlib-site.legacy</code> ClientLib contains both a <code>css.txt</code> and <code>js.txt</code> file.</p><p>Both the <code>esModule</code> and <code>noModule</code> properties won&#39;t be required in this case since we are no longer working with an ES module.</p>`,13);function y(t,h,u,D,F,b){return p(),o("div",null,[e("h1",r,[a(n(t.$frontmatter.title)+" ",1),c]),d])}var w=s(i,[["render",y]]);export{m as __pageData,w as default};
