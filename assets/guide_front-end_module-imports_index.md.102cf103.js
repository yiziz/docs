import{_ as o,c as n,a as e,b as t,t as a,d as l,o as i}from"./app.45b0ee04.js";const A=JSON.parse('{"title":"Module Imports","description":"","frontmatter":{"title":"Module Imports"},"headers":[{"level":2,"title":"The problem","slug":"the-problem","link":"#the-problem","children":[]},{"level":2,"title":"Solving this problem","slug":"solving-this-problem","link":"#solving-this-problem","children":[{"level":3,"title":"Example Vite configuration","slug":"example-vite-configuration","link":"#example-vite-configuration","children":[]}]}],"relativePath":"guide/front-end/module-imports/index.md","lastUpdated":1674370298000}'),r={name:"guide/front-end/module-imports/index.md"},p={id:"frontmatter-title",tabindex:"-1"},c=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),d=l(`<p>An ES module import is a <code>import</code> statement that intructs your browser to automatically load a new file in context. This is an amazing feature in modern development as it avoids the need for polyfills and libraries.</p><h2 id="the-problem" tabindex="-1">The problem <a class="header-anchor" href="#the-problem" aria-hidden="true">#</a></h2><p>Due to the way Vite generates outputs, <code>import</code> statements will become relative which in the context of AEM won&#39;t work. Lets say that we have a ClientLib located at: <strong>/etc.clientlibs/&lt;project&gt;/clientlibs/clientlib-site.js</strong></p><p>Within <code>my-clientlib.js</code> lets assume that a module by the name of <code>modulea.js</code> needs to be imported by is been requested using: <strong>../../resources/modulea.js</strong></p><p>What you will see in your browser is a 404 request error for <code>modulea.js</code> because the request URI will end up looking something like: <strong>/etc.clientlibs/&lt;project&gt;/clientlibs/clientlib-site/resources/modulea.js</strong></p><h2 id="solving-this-problem" tabindex="-1">Solving this problem <a class="header-anchor" href="#solving-this-problem" aria-hidden="true">#</a></h2><p>You might think this is a tough problem to resolve but AEM provides a nice simple solution which only requires us to nest our compiled files into a nested <code>resources</code> folder. For some background, AEM 6.4 and newer don&#39;t respond to requests via the <code>/etc.clientlibs</code> proxy unless the requested resource resides within a <code>resources</code> folder.</p><h3 id="example-vite-configuration" tabindex="-1">Example Vite configuration <a class="header-anchor" href="#example-vite-configuration" aria-hidden="true">#</a></h3><p>Here is an example of how to configure Vite to ensure all files are placed in the correct places.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">build</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">rollupOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">chunkFileNames</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">clientlib-site/resources/chunks/[name].[hash].js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,10);function h(s,u,m,y,D,g){return i(),n("div",null,[e("h1",p,[t(a(s.$frontmatter.title)+" ",1),c]),d])}const b=o(r,[["render",h]]);export{A as __pageData,b as default};
