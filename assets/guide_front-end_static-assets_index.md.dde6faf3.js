import{_ as a,c as t,a as s,b as e,t as o,d as p,o as c}from"./app.7364d4aa.js";const _='{"title":"Static Assets","description":"","frontmatter":{"title":"Static Assets"},"headers":[{"level":2,"title":"Importing Static Assets","slug":"importing-static-assets"},{"level":2,"title":"Usage with React","slug":"usage-with-react"},{"level":2,"title":"Known Issues","slug":"known-issues"}],"relativePath":"guide/front-end/static-assets/index.md"}',i={},r={id:"frontmatter-title",tabindex:"-1"},l=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),u=p(`<p>Prior to Vite <code>2.6</code> there was no way to resolve static assets in JavaScript and CSS without some clunky workarounds. However, as of <code>2.6</code> and greater this is fixed.</p><h2 id="importing-static-assets" tabindex="-1">Importing Static Assets <a class="header-anchor" href="#importing-static-assets" aria-hidden="true">#</a></h2><p>Based on where you set your <code>publicDir</code> will depend on the base path, but for this we will assume it is <code>src/assets</code>.</p><p>To include an asset in both JavaScript and CSS we can do the following:</p><div class="language-scss"><pre><code><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">&#39;Open Sans&#39;</span><span class="token punctuation">;</span>
  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> 300<span class="token punctuation">;</span>
  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token function">local</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">&#39;/src/assets/fonts/open-sans/open-sans-v27-latin-300.woff2&#39;</span><span class="token punctuation">)</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;woff2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">&#39;/src/assets/fonts/open-sans/open-sans-v27-latin-300.woff&#39;</span><span class="token punctuation">)</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;woff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="usage-with-react" tabindex="-1">Usage with React <a class="header-anchor" href="#usage-with-react" aria-hidden="true">#</a></h2><p>When using assets such as SVG&#39;s with React the path will become relative to the assets directory. The reason for this is how Vite&#39;s React plugin handles static assets by converting them into components as required. For instance, if we have an asset called <code>vue-logo.svg</code> we would import it using the below.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> VueLogo <span class="token keyword">from</span> <span class="token string">&#39;../../../assets/vue-logo.svg&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>The above example assumes where your React component lives so please update it to reflect your project structure.</p><h2 id="known-issues" tabindex="-1">Known Issues <a class="header-anchor" href="#known-issues" aria-hidden="true">#</a></h2><p>The only current issue known to us is a warning that appears in the terminal output for Vite asset transformations. This occurs because we&#39;re including <code>/src</code> in the path which when using Vite standalone isn&#39;t required. Prepending <code>/src</code> is required for AEM projects as it enforces the correct processing of such assets during <code>build</code> tasks.</p>`,11);function d(n,h,k,f,g,w){return c(),t("div",null,[s("h1",r,[e(o(n.$frontmatter.title)+" ",1),l]),u])}var v=a(i,[["render",d]]);export{_ as __pageData,v as default};
