import{_ as s,c as n,a as e,b as a,t as o,d as i,o as r}from"./app.7364d4aa.js";const _='{"title":"Module Imports","description":"","frontmatter":{"title":"Module Imports"},"headers":[{"level":2,"title":"The problem","slug":"the-problem"},{"level":2,"title":"Solving this problem","slug":"solving-this-problem"},{"level":3,"title":"Example Vite configuration","slug":"example-vite-configuration"}],"relativePath":"guide/front-end/module-imports/index.md"}',l={},p={id:"frontmatter-title",tabindex:"-1"},c=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),u=i(`<p>An ES module import is a <code>import</code> statement that intructs your browser to automatically load a new file in context. This is an amazing feature in modern development as it avoids the need for polyfills and libraries.</p><h2 id="the-problem" tabindex="-1">The problem <a class="header-anchor" href="#the-problem" aria-hidden="true">#</a></h2><p>Due to the way Vite generates outputs, <code>import</code> statements will become relative which in the context of AEM won&#39;t work. Lets say that we have a ClientLib located at: <strong>/etc.clientlibs/&lt;project&gt;/clientlibs/clientlib-site.js</strong></p><p>Within <code>my-clientlib.js</code> lets assume that a module by the name of <code>modulea.js</code> needs to be imported by is been requested using: <strong>../../resources/modulea.js</strong></p><p>What you will see in your browser is a 404 request error for <code>modulea.js</code> because the request URI will end up looking something like: <strong>/etc.clientlibs/&lt;project&gt;/clientlibs/clientlib-site/resources/modulea.js</strong></p><h2 id="solving-this-problem" tabindex="-1">Solving this problem <a class="header-anchor" href="#solving-this-problem" aria-hidden="true">#</a></h2><p>You might think this is a tough problem to resolve but AEM provides a nice simple solution which only requires us to nest our compiled files into a nested <code>resources</code> folder. For some background, AEM 6.4 and newer don&#39;t respond to requests via the <code>/etc.clientlibs</code> proxy unless the requested resource resides within a <code>resources</code> folder.</p><h3 id="example-vite-configuration" tabindex="-1">Example Vite configuration <a class="header-anchor" href="#example-vite-configuration" aria-hidden="true">#</a></h3><p>Here is an example of how to configure Vite to ensure all files are placed in the correct places.</p><div class="language-ts"><div class="highlight-lines"><br><br><br><br><div class="highlighted">\xA0</div><br><br><br><br><br></div><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  build<span class="token operator">:</span> <span class="token punctuation">{</span>
    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
      output<span class="token operator">:</span> <span class="token punctuation">{</span>
        chunkFileNames<span class="token operator">:</span> <span class="token string">&#39;clientlib-site/resources/chunks/[name].[hash].js&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,10);function d(t,h,m,b,g,k){return r(),n("div",null,[e("h1",p,[a(o(t.$frontmatter.title)+" ",1),c]),u])}var v=s(l,[["render",d]]);export{_ as __pageData,v as default};
